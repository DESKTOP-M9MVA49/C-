#include <iostream>
#include "math.h"
using namespace std;
int main()
{
    float f1[50][50], f2[50][50];   //定义两个二维数组 
    int i, j, n, a, u{ 0 };  //i,j为二维数组坐标；n为网格坐标最大值；a用作方程的迭代判断；u用于方程迭代次数的计数 ;
    for (i = 0; i <= 8; i++)      //给AB边赋值
    {
        j = 0;
        f1[i][j] = 100;
    }
    for (j = 0; j <= 8; j++)      //给AD边赋值
    {
        i = 0;
        f1[i][j] = 100;
    }
    for (i = 0; i <= 8; i++)      //给CD边赋值
    {
        j = 8;
        f1[i][j] = 1000;
    }
    for (j = 0; j <= 8; j++)      //给BC边赋值
    {
        i = 8;
        f1[i][j] = 340;
    }
    for (i = 1; i < 8; i++)
    {
        for (j = 1; j < 8; j++)       //给内部节点设初值
            f1[i][j] = 0;
    }
    do
    {
        a = 0;     //给a赋值，给后面判断是否继续迭代 
        for (i = 0; i <= 8; i++)
        {
            for (j = 0; j <= 8; j++)
                f2[i][j] = f1[i][j];         //将f1的值赋给f2
        }
        for (i = 2; i <= 6; i++)     //计算底边界 
        {

            f1[i][1] = 0.2 * f1[i][2] + 0.2 * f1[i - 1][1] + 0.4 * f1[i][0] + 0.2 * f1[i + 1][1];
        }
        for (j = 2; j <= 6; j++)     //计算左边界 
        {
            i = 1;
            f1[i][j] = 0.2 * f1[i][j + 1] + 0.4 * f1[i - 1][j] + 0.2 * f1[i][j - 1] + 0.2 * f1[i + 1][j];
        }
        for (i = 2; i <= 6; i++)     //计算上边界
        {
            j = 7;
            f1[i][j] = 0.4 * f1[i][j + 1] + 0.2 * f1[i - 1][j] + 0.2 * f1[i][j - 1] + 0.2 * f1[i + 1][j];
        }
        for (j = 2; j <= 6; j++)     //计算右边界 
        {
            i = 7;
            f1[i][j] = 0.2 * f1[i][j + 1] + 0.2 * f1[i - 1][j] + 0.2 * f1[i][j - 1] + 0.4 * f1[i + 1][j];
        }
        i = 1; j = 1;//左下角计算
        {
            f1[i][j] = 0.166666667 * f1[i][j + 1] + 0.33333333 * f1[i - 1][j] + 0.3333333 * f1[i][j - 1] + 0.166666667 * f1[i + 1][j];
        }
        i = 1; j = 7;//左上角计算
        {
            f1[i][j] = 0.166666667 * f1[i][j + 1] + 0.166666667 * f1[i - 1][j] + 0.3333333 * f1[i][j - 1] + 0.3333333 * f1[i + 1][j];
        }
        i = 7; j = 1;//右下角计算
        {
            f1[i][j] = 0.3333333 * f1[i][j + 1] + 0.3333333 * f1[i - 1][j] + 0.166666667 * f1[i][j - 1] + 0.166666667 * f1[i + 1][j];
        }
        i = 7; j = 7;//右上角计算
        {
            f1[i][j] = 0.333 * f1[i][j + 1] + 0.1667 * f1[i - 1][j] + 0.1667 * f1[i][j - 1] + 0.333 * f1[i + 1][j];
        }
        for (i = 2; i < 7; i++)//内部网格计算 
        {
            for (j = 2; j < 7; j++)
            {

                {
                    f1[i][j] = 0.25 * f1[i][j + 1] + 0.25 * f1[i - 1][j] + 0.25 * f1[i][j - 1] + 0.25 * f1[i + 1][j];
                }
            }
        }
        for (i = 1; i < 7; i++)
        {
            for (j = 1; j < 7; j++)
            {
                if (fabs(f1[i][j] - f2[i][j]) >= 1e-5)  //保证前一次迭代值与后一次的迭代 值之差在1e-5内 
                    a = 1;     //若误差大于1e-5,则令a=1，继续进入do while循环进行迭代 
            }
        }
        u++;      //对迭代次数进行计数 
    } while (a == 1);
    for (j = 1; j < 8; j++)
    {
        {     for (i = 1; i < 8; i++) //将每个网格体心的温度按矩阵形式输出
            cout << f1[i][j] << " ";
        }
        cout << endl;
    }
    cout << "迭代次数=" << u << endl;
    system("pause");
    return 0;
}
